name: test

on:
  schedule:
    - cron:  '*/30 * * * *'
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: generate matrix
        id: gen-matrix
        run: |
          wget 'https://raw.githubusercontent.com/jmir1/aniyomi-extensions/repo/index.min.json'
          BATCHES=$(jq -cr '{batches:[map(.apk) | _nwise(5)] | to_entries | map({apks:.value, index:.key}) }' index.min.json)
          echo "matrix=$BATCHES" >> $GITHUB_OUTPUT

  test_batches:
    name: test batches of extensions
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: dl tester
        run: |
          wget 'https://api.github.com/repos/Claudemirovsky/aniyomi-extensions-tester/releases/latest' -O latest.json
          JAR=$(jq -cr '.assets[0].browser_download_url' latest.json)
          wget $JAR -O tester.jar

      - name: dl apks
        id: dl-apks
        run: |
          APKS='${{ toJSON(matrix.batches) }}'
          INDEX=$(jq -cr '.index' <<< $APKS)
          echo "index=$INDEX" >> $GITHUB_OUTPUT
          jq -cr '.apks | .[]' <<< $APKS | while read link; do
            wget https://raw.githubusercontent.com/jmir1/aniyomi-extensions/repo/apk/$link -P apk/
          done

      - name: test apks
        run: |
          java -jar tester.jar apk -C -D json

      - name: upload results
        uses: actions/upload-artifact@v3
        with:
          name: "results-${{ steps.dl-apks.outputs.index }}"
          path: "json/"
          retention-days: 1

  generate_results:
    name: generate the results
    needs: test_batches
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: results

      - name: get results
        uses: actions/download-artifact@v3

      - name: check results and make index results file
        run: |
          mkdir -p results
          [ ! -f results-*/*.json ] || mv results-*/*.json results/
          rm -df results-*
          echo '[' > results.json.tmp
          find results/*.json | while read file; do
            PKGJSON=$(printf '%s\n' "${file#results/results-}")
            PKG=$(printf '%s\n' "${PKGJSON%.json}")
            COUNT=$(jq -cr 'length' $file)
            PASSED_COUNT=$(jq -cr 'map(.results | map(select(.passed != true) | .passed) | length > 0) | map(select(. == true)) | length' $file)
            PASSED=$([ COUNT == PASSED_COUNT ] && echo true || echo false)
            echo "{\"pkg\":\"$PKG\",\"passed\":$PASSED}," >> results.json.tmp
          done
          sed -i '$ s/.$//' results.json.tmp
          echo ']' >> results.json.tmp
          jq '.' results.json.tmp > results.json
          rm results.json.tmp

      - name: commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update result files"
          git push
