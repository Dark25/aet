name: test

on:
  # schedule:
  #   - cron:  '0 */6 * * *'
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
      jar: ${{ steps.get-jar.outputs.jar }}
    steps:
      - name: generate matrix
        id: gen-matrix
        run: |
          wget 'https://raw.githubusercontent.com/jmir1/aniyomi-extensions/repo/index.min.json'
          BATCHES=$(jq -cr '{batches:[map(.apk) | _nwise(5)] | to_entries | map({apks:.value, index:.key}) }' index.min.json)
          echo "matrix=$BATCHES" >> $GITHUB_OUTPUT

      - name: get tester jar
        id: get-jar
        run: |
          wget 'https://api.github.com/repos/Claudemirovsky/aniyomi-extensions-tester/releases/latest' -O latest.json
          JAR=$(jq -cr '.assets[0].browser_download_url' latest.json)
          echo "jar=$JAR" >> $GITHUB_OUTPUT

  test_batches:
    name: test batches of extensions
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: dl tester
        run: |
          JAR=${{ needs.prepare.outputs.jar }}
          wget $JAR -O tester.jar

      - name: dl apks
        id: dl-apks
        run: |
          APKS='${{ toJSON(matrix.batches) }}'
          INDEX=$(jq -cr '.index' <<< $APKS)
          echo "index=$INDEX" >> $GITHUB_OUTPUT
          jq -cr '.apks | .[]' <<< $APKS | while read link; do
            wget https://raw.githubusercontent.com/jmir1/aniyomi-extensions/repo/apk/$link -P apk/
          done
 
      - name: Install XVFB to use GUI
        run: |
          sudo apt update
          sudo apt install -y xvfb --no-install-recommends

      - name: test apks
        run: |
          Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
          export DISPLAY=:99.0
          # java -jar tester.jar apk -C -D json -P -d
          java -jar tester.jar apk --complete-results --json-dir json --pretty-json --debug

      - name: upload results
        uses: actions/upload-artifact@v3
        with:
          name: "results-${{ steps.dl-apks.outputs.index }}"
          path: "json/"
          retention-days: 1

  generate_results:
    name: generate the results
    needs: test_batches
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: results

      - name: get results
        uses: actions/download-artifact@v3

      - name: check results and make index results file
        id: check
        run: |
          set -x
          COUNT_PASSED=0
          COUNT_ALL=0
          TABLEJSON=results.table.ndjson
          TMPFILE=results.json.tmp
          echo '[' > $TMPFILE

          [[ -e results ]] && rm -rf results
          mkdir -p results
          mv results-*/*.json results/
          rm -df results-*

          for file in results/*.json; do
              COUNT_ALL=$((COUNT_ALL+1))
              PKGJSON=$(printf '%s\n' "${file#results/results-}")
              PKG=$(printf '%s\n' "${PKGJSON%.json}")
              COUNT=$(jq -cr 'length' $file)
              PASSED_COUNT=$(jq -cr 'map(.results | map(select(.passed != true)) | length == 0) | map(select(. == true)) | length' $file)
              if [[ "$COUNT" == "$PASSED_COUNT" ]]; then
                  COUNT_PASSED=$((COUNT_PASSED+1))
                  PASSED=true
                  PASSEDEMOJI=✅
              else
                  PASSED=false
                  total_tests=$(jq -cr "map(.results | length) | add" $file)
                  total_success=$(jq -cr "map(.results | map(select(.passed == true)) | length) | add" $file)
                  PASSEDEMOJI="❌<br>$total_success/$total_tests"
              fi
              URL=https://raw.githubusercontent.com/$GITHUB_REPOSITORY/results/results/results-$PKGJSON
              echo "{\"pkg\":\"$PKG\",\"passed\":$PASSED,\"log\":\"$URL\"}," >> $TMPFILE
              echo "{\"Extension\":\"$PKG\",\"Status\":\"$PASSEDEMOJI\",\"Log\":\"[results-$PKGJSON]($URL)\"}" >> $TABLEJSON
          done
          sed -i '$ s/.$//' $TMPFILE
          echo ']' >> $TMPFILE
          jq '.' $TMPFILE > results.json
          rm $TMPFILE
          echo "all=$COUNT_ALL" >> $GITHUB_OUTPUT
          echo "passed=$COUNT_PASSED" >> $GITHUB_OUTPUT

      - name: make table
        run: |
          npm i -g tablemark-cli
          printf "## Extension status\n\n### ${{ steps.check.outputs.passed }}/${{ steps.check.outputs.all }} are working\n\n" > README.md
          tablemark results.table.json -a left -a center -a left >> README.md
          rm results.table.json

      - name: commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update result files"
          git push
